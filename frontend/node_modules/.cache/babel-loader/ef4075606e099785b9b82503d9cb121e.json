{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asdas\\\\Downloads\\\\MERN-Auth-Tutorial-lesson-17\\\\crud\\\\frontend\\\\src\\\\components\\\\Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Login = () => {\n  _s();\n\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const navigate = useNavigate();\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false); // Set initial value of isLoading to false\n\n  const handleLogin = async () => {\n    try {\n      setIsLoading(true); // Set isLoading to true when login request starts\n\n      const response = await axios.post('http://localhost:4000/login', {\n        email,\n        password\n      });\n      const {\n        token\n      } = response.data;\n\n      if (!token) {\n        setError('Token not received');\n        setIsLoading(false); // Set isLoading to false when login fails\n      } else {\n        // save the token to local storage\n        localStorage.setItem('token', token); // Redirect to tasks page\n\n        navigate('/task');\n      }\n    } catch (error) {\n      setError('Login failed. Please try again.'); // Set error message if login request fails\n\n      setIsLoading(false); // Set isLoading to false when login fails\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"email\",\n      placeholder: \"Email\",\n      value: email,\n      onChange: e => setEmail(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      placeholder: \"Password\",\n      value: password,\n      onChange: e => setPassword(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this) // Show loading indicator when isLoading is true\n    : /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLogin,\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Login, \"0sLI2lFYMoFMC40S2nRj4d6fL30=\", false, function () {\n  return [useNavigate];\n});\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","axios","useNavigate","Login","email","setEmail","password","setPassword","navigate","error","setError","isLoading","setIsLoading","handleLogin","response","post","token","data","localStorage","setItem","e","target","value","color"],"sources":["C:/Users/asdas/Downloads/MERN-Auth-Tutorial-lesson-17/crud/frontend/src/components/Login.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst Login = () => {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const navigate = useNavigate();\r\n  const [error, setError] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false); // Set initial value of isLoading to false\r\n\r\n  const handleLogin = async () => {\r\n    try {\r\n      setIsLoading(true); // Set isLoading to true when login request starts\r\n      const response = await axios.post('http://localhost:4000/login', {\r\n        email,\r\n        password\r\n      });\r\n\r\n      const { token } = response.data;\r\n\r\n      if (!token) {\r\n        setError('Token not received');\r\n        setIsLoading(false); // Set isLoading to false when login fails\r\n      } else {\r\n        // save the token to local storage\r\n        localStorage.setItem('token', token);\r\n  \r\n        // Redirect to tasks page\r\n        navigate('/task');\r\n      }\r\n    } catch (error) {\r\n      setError('Login failed. Please try again.'); // Set error message if login request fails\r\n      setIsLoading(false); // Set isLoading to false when login fails\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Login</h2>\r\n      <input\r\n        type=\"email\"\r\n        placeholder=\"Email\"\r\n        value={email}\r\n        onChange={(e) => setEmail(e.target.value)}\r\n      />\r\n      <input\r\n        type=\"password\"\r\n        placeholder=\"Password\"\r\n        value={password}\r\n        onChange={(e) => setPassword(e.target.value)}\r\n      />\r\n      {isLoading ? (\r\n        <p>Loading...</p> // Show loading indicator when isLoading is true\r\n      ) : (\r\n        <button onClick={handleLogin}>Login</button>\r\n      )}\r\n      {error && <p style={{ color: 'red' }}>{error}</p>} {/* Display error message if error exists */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,kBAA5B;;;AAEA,MAAMC,KAAK,GAAG,MAAM;EAAA;;EAClB,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,EAAD,CAAlC;EACA,MAAM,CAACM,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,EAAD,CAAxC;EACA,MAAMQ,QAAQ,GAAGN,WAAW,EAA5B;EACA,MAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,IAAD,CAAlC;EACA,MAAM,CAACW,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,KAAD,CAA1C,CALkB,CAKiC;;EAEnD,MAAMa,WAAW,GAAG,YAAY;IAC9B,IAAI;MACFD,YAAY,CAAC,IAAD,CAAZ,CADE,CACkB;;MACpB,MAAME,QAAQ,GAAG,MAAMb,KAAK,CAACc,IAAN,CAAW,6BAAX,EAA0C;QAC/DX,KAD+D;QAE/DE;MAF+D,CAA1C,CAAvB;MAKA,MAAM;QAAEU;MAAF,IAAYF,QAAQ,CAACG,IAA3B;;MAEA,IAAI,CAACD,KAAL,EAAY;QACVN,QAAQ,CAAC,oBAAD,CAAR;QACAE,YAAY,CAAC,KAAD,CAAZ,CAFU,CAEW;MACtB,CAHD,MAGO;QACL;QACAM,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BH,KAA9B,EAFK,CAIL;;QACAR,QAAQ,CAAC,OAAD,CAAR;MACD;IACF,CAnBD,CAmBE,OAAOC,KAAP,EAAc;MACdC,QAAQ,CAAC,iCAAD,CAAR,CADc,CAC+B;;MAC7CE,YAAY,CAAC,KAAD,CAAZ,CAFc,CAEO;IACtB;EACF,CAxBD;;EA0BA,oBACE;IAAA,wBACE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MACE,IAAI,EAAC,OADP;MAEE,WAAW,EAAC,OAFd;MAGE,KAAK,EAAER,KAHT;MAIE,QAAQ,EAAGgB,CAAD,IAAOf,QAAQ,CAACe,CAAC,CAACC,MAAF,CAASC,KAAV;IAJ3B;MAAA;MAAA;MAAA;IAAA,QAFF,eAQE;MACE,IAAI,EAAC,UADP;MAEE,WAAW,EAAC,UAFd;MAGE,KAAK,EAAEhB,QAHT;MAIE,QAAQ,EAAGc,CAAD,IAAOb,WAAW,CAACa,CAAC,CAACC,MAAF,CAASC,KAAV;IAJ9B;MAAA;MAAA;MAAA;IAAA,QARF,EAcGX,SAAS,gBACR;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADQ,CACU;IADV,eAGR;MAAQ,OAAO,EAAEE,WAAjB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAjBJ,EAmBGJ,KAAK,iBAAI;MAAG,KAAK,EAAE;QAAEc,KAAK,EAAE;MAAT,CAAV;MAAA,UAA6Bd;IAA7B;MAAA;MAAA;MAAA;IAAA,QAnBZ;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAuBD,CAxDD;;GAAMN,K;UAGaD,W;;;KAHbC,K;AA0DN,eAAeA,KAAf"},"metadata":{},"sourceType":"module"}